Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 17.0.2.174 Build 20170213

Compiler options: -O3 -xHost -qopt-report3 -qopt-report-phase=vec,loop -qopt-report-embed -c -o idctref.o

Begin optimization report for: Reference_IDCT()

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at idctref.c(83,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at idctref.c(84,5)
      remark #15301: OUTER LOOP WAS VECTORIZED
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 17 
      remark #15477: vector cost: 5.000 
      remark #15478: estimated potential speedup: 2.610 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=2

      LOOP BEGIN at idctref.c(88,7)
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15452: unmasked strided loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 11 
         remark #15477: vector cost: 5.000 
         remark #15478: estimated potential speedup: 1.410 
         remark #15487: type converts: 1 
         remark #15488: --- end vector cost summary ---
         remark #15548: loop was vectorized along with the outer loop
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at idctref.c(97,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at idctref.c(98,5)
      remark #15301: OUTER LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15453: unmasked strided stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 130 
      remark #15477: vector cost: 27.120 
      remark #15478: estimated potential speedup: 4.440 
      remark #15482: vectorized math library calls: 1 
      remark #15487: type converts: 1 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=1

      LOOP BEGIN at idctref.c(102,7)
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15452: unmasked strided loads: 2 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 8 
         remark #15477: vector cost: 5.500 
         remark #15478: estimated potential speedup: 1.010 
         remark #15488: --- end vector cost summary ---
         remark #15548: loop was vectorized along with the outer loop
         remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: Initialize_Reference_IDCT()

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at idctref.c(66,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized
   remark #25436: completely unrolled by 8  

   LOOP BEGIN at idctref.c(69,5)
      remark #15300: LOOP WAS VECTORIZED
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 117 
      remark #15477: vector cost: 21.000 
      remark #15478: estimated potential speedup: 5.310 
      remark #15482: vectorized math library calls: 1 
      remark #15487: type converts: 1 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END
===========================================================================
