Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 17.0.2.174 Build 20170213

Compiler options: -O3 -xHost -qopt-report3 -qopt-report-phase=vec,loop -qopt-report-embed -o systems.o -c

Begin optimization report for: Next_Packet()

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at systems.c(49,5)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at systems.c(75,9)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at systems.c(115,7)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15453: unmasked strided stores: 4 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 8 
   remark #15477: vector cost: 9.000 
   remark #15478: estimated potential speedup: 0.880 
   remark #15488: --- end vector cost summary ---
   remark #25438: unrolled without remainder by 2  
LOOP END


Non-optimizable loops:


LOOP BEGIN at systems.c(56,7)
   remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification
LOOP END
===========================================================================

Begin optimization report for: Flush_Buffer32()

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at systems.c(49,5) inlined into systems.c(158,9)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at systems.c(75,9) inlined into systems.c(158,9)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at systems.c(115,7) inlined into systems.c(158,9)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15453: unmasked strided stores: 4 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 8 
   remark #15477: vector cost: 9.000 
   remark #15478: estimated potential speedup: 0.880 
   remark #15488: --- end vector cost summary ---
   remark #25438: unrolled without remainder by 2  
LOOP END

LOOP BEGIN at systems.c(165,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between ld->Rdptr (167:7) and ld->Rdptr (169:19)
   remark #25439: unrolled with remainder by 2  
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
LOOP END

LOOP BEGIN at systems.c(165,5)
<Remainder>
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
LOOP END


Non-optimizable loops:


LOOP BEGIN at systems.c(155,5)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.   [ systems.c(56,7) ]

   LOOP BEGIN at systems.c(56,7) inlined into systems.c(158,9)
      remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: Get_Bits32()

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at systems.c(49,5) inlined into systems.c(186,3)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at systems.c(75,9) inlined into systems.c(186,3)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at systems.c(115,7) inlined into systems.c(186,3)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15453: unmasked strided stores: 4 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 8 
   remark #15477: vector cost: 9.000 
   remark #15478: estimated potential speedup: 0.880 
   remark #15488: --- end vector cost summary ---
   remark #25438: unrolled without remainder by 2  
LOOP END

LOOP BEGIN at systems.c(165,5) inlined into systems.c(186,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between ld->Rdptr (167:7) and ld->Rdptr (169:19)
   remark #25439: unrolled with remainder by 2  
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
LOOP END

LOOP BEGIN at systems.c(165,5) inlined into systems.c(186,3)
<Remainder>
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
LOOP END


Non-optimizable loops:


LOOP BEGIN at systems.c(155,5) inlined into systems.c(186,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.   [ systems.c(56,7) ]

   LOOP BEGIN at systems.c(56,7) inlined into systems.c(186,3)
      remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification
   LOOP END
LOOP END
===========================================================================
