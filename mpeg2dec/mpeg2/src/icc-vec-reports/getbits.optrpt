Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 17.0.2.174 Build 20170213

Compiler options: -O3 -xHost -qopt-report3 -qopt-report-phase=vec,loop -qopt-report-embed -o getbits.o -c

Begin optimization report for: Fill_Buffer()

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at getbits.c(81,5)
   remark #15523: loop was not vectorized: loop control variable Buffer_Level was found, but loop iteration count cannot be computed before executing the loop
   remark #25478: While Loop Unrolled by 8  
LOOP END

LOOP BEGIN at getbits.c(85,5)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15453: unmasked strided stores: 4 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 8 
   remark #15477: vector cost: 9.000 
   remark #15478: estimated potential speedup: 0.880 
   remark #15488: --- end vector cost summary ---
   remark #25439: unrolled with remainder by 2  
   remark #25015: Estimate of max trip count of loop=512
LOOP END

LOOP BEGIN at getbits.c(85,5)
<Remainder>
   remark #25015: Estimate of max trip count of loop=512
LOOP END
===========================================================================

Begin optimization report for: Get_Byte()

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at getbits.c(100,3)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END
===========================================================================

Begin optimization report for: Get_Word()

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at getbits.c(100,3) inlined into getbits.c(114,9)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at getbits.c(100,3) inlined into getbits.c(115,21)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END
===========================================================================

Begin optimization report for: Get_Bits1()

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at getbits.c(149,5) inlined into getbits.c(132,10)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details

   LOOP BEGIN at getbits.c(100,3) inlined into getbits.c(132,10)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END

LOOP BEGIN at getbits.c(160,10) inlined into getbits.c(132,10)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between ld->Rdbfr (66:18) and ld->Rdbfr[Buffer_Level+3] (90:7)

   LOOP BEGIN at getbits.c(81,5) inlined into getbits.c(132,10)
      remark #15523: loop was not vectorized: loop control variable Buffer_Level was found, but loop iteration count cannot be computed before executing the loop
      remark #25478: While Loop Unrolled by 2  
   LOOP END

   LOOP BEGIN at getbits.c(85,5) inlined into getbits.c(132,10)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15453: unmasked strided stores: 4 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 8 
      remark #15477: vector cost: 9.000 
      remark #15478: estimated potential speedup: 0.880 
      remark #15488: --- end vector cost summary ---
      remark #25439: unrolled with remainder by 2  
      remark #25015: Estimate of max trip count of loop=512
   LOOP END

   LOOP BEGIN at getbits.c(85,5) inlined into getbits.c(132,10)
   <Remainder>
      remark #25015: Estimate of max trip count of loop=512
   LOOP END
LOOP END

LOOP BEGIN at getbits.c(160,10) inlined into getbits.c(132,10)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between *ld->Rdptr (164:9) and ld->Rdptr (164:21)
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
LOOP END
===========================================================================

Begin optimization report for: Flush_Buffer()

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at getbits.c(149,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details

   LOOP BEGIN at getbits.c(100,3) inlined into getbits.c(155,20)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END

LOOP BEGIN at getbits.c(160,10)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between ld->Rdbfr (66:18) and ld->Rdbfr[Buffer_Level+3] (90:7)

   LOOP BEGIN at getbits.c(81,5) inlined into getbits.c(174,11)
      remark #15523: loop was not vectorized: loop control variable Buffer_Level was found, but loop iteration count cannot be computed before executing the loop
      remark #25478: While Loop Unrolled by 2  
   LOOP END

   LOOP BEGIN at getbits.c(85,5) inlined into getbits.c(174,11)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15453: unmasked strided stores: 4 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 8 
      remark #15477: vector cost: 9.000 
      remark #15478: estimated potential speedup: 0.880 
      remark #15488: --- end vector cost summary ---
      remark #25439: unrolled with remainder by 2  
      remark #25015: Estimate of max trip count of loop=512
   LOOP END

   LOOP BEGIN at getbits.c(85,5) inlined into getbits.c(174,11)
   <Remainder>
      remark #25015: Estimate of max trip count of loop=512
   LOOP END
LOOP END

LOOP BEGIN at getbits.c(160,10)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between *ld->Rdptr (164:9) and ld->Rdptr (164:21)
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
LOOP END
===========================================================================

Begin optimization report for: Get_Bits()

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at getbits.c(149,5) inlined into getbits.c(198,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details

   LOOP BEGIN at getbits.c(100,3) inlined into getbits.c(198,3)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END

LOOP BEGIN at getbits.c(160,10) inlined into getbits.c(198,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between ld->Rdbfr (66:18) and ld->Rdbfr[Buffer_Level+3] (90:7)

   LOOP BEGIN at getbits.c(81,5) inlined into getbits.c(198,3)
      remark #15523: loop was not vectorized: loop control variable Buffer_Level was found, but loop iteration count cannot be computed before executing the loop
      remark #25478: While Loop Unrolled by 2  
   LOOP END

   LOOP BEGIN at getbits.c(85,5) inlined into getbits.c(198,3)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15453: unmasked strided stores: 4 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 8 
      remark #15477: vector cost: 9.000 
      remark #15478: estimated potential speedup: 0.880 
      remark #15488: --- end vector cost summary ---
      remark #25439: unrolled with remainder by 2  
      remark #25015: Estimate of max trip count of loop=512
   LOOP END

   LOOP BEGIN at getbits.c(85,5) inlined into getbits.c(198,3)
   <Remainder>
      remark #25015: Estimate of max trip count of loop=512
   LOOP END
LOOP END

LOOP BEGIN at getbits.c(160,10) inlined into getbits.c(198,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between *ld->Rdptr (164:9) and ld->Rdptr (164:21)
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
LOOP END
===========================================================================

Begin optimization report for: Initialize_Buffer()

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at getbits.c(149,5) inlined into getbits.c(59,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details

   LOOP BEGIN at getbits.c(100,3) inlined into getbits.c(59,3)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END

LOOP BEGIN at getbits.c(160,10) inlined into getbits.c(59,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between ld->Rdbfr (66:18) and ld->Rdbfr[Buffer_Level+3] (90:7)

   LOOP BEGIN at getbits.c(81,5) inlined into getbits.c(59,3)
      remark #15523: loop was not vectorized: loop control variable Buffer_Level was found, but loop iteration count cannot be computed before executing the loop
      remark #25478: While Loop Unrolled by 2  
   LOOP END

   LOOP BEGIN at getbits.c(85,5) inlined into getbits.c(59,3)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15453: unmasked strided stores: 4 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 8 
      remark #15477: vector cost: 9.000 
      remark #15478: estimated potential speedup: 0.880 
      remark #15488: --- end vector cost summary ---
      remark #25439: unrolled with remainder by 2  
      remark #25015: Estimate of max trip count of loop=512
   LOOP END

   LOOP BEGIN at getbits.c(85,5) inlined into getbits.c(59,3)
   <Remainder>
      remark #25015: Estimate of max trip count of loop=512
   LOOP END
LOOP END

LOOP BEGIN at getbits.c(160,10) inlined into getbits.c(59,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between *ld->Rdptr (164:9) and ld->Rdptr (164:21)
   remark #25436: completely unrolled by 4  
LOOP END
===========================================================================
