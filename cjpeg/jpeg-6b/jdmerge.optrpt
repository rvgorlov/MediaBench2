Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 17.0.2.174 Build 20170213

Compiler options: -I. -O3 -xHost -qopt-report3 -qopt-report-phase=vec,loop -qopt-report-embed -vec_report -o jdmerge.o -c

Begin optimization report for: h2v1_merged_upsample(j_decompress_ptr, JSAMPIMAGE, JDIMENSION, JSAMPARRAY)

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at jdmerge.c(249,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between *inptr1 (251:5) and *(outptr+2) (265:5)
LOOP END
===========================================================================

Begin optimization report for: h2v2_merged_upsample(j_decompress_ptr, JSAMPIMAGE, JDIMENSION, JSAMPARRAY)

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at jdmerge.c(313,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between *inptr1 (315:5) and *(outptr1+2) (339:5)
LOOP END
===========================================================================

Begin optimization report for: jinit_merged_upsampler(j_decompress_ptr)

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at jdmerge.c(103,3) inlined into jdmerge.c(397,3)
<Multiversioned v1>
   remark #25228: Loop multiversioned for Data Dependence
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15451: unmasked unaligned unit stride stores: 4 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 20 
   remark #15477: vector cost: 50.000 
   remark #15478: estimated potential speedup: 0.390 
   remark #15488: --- end vector cost summary ---
   remark #25438: unrolled without remainder by 2  
LOOP END

LOOP BEGIN at jdmerge.c(103,3) inlined into jdmerge.c(397,3)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   remark #25438: unrolled without remainder by 2  
LOOP END
===========================================================================
