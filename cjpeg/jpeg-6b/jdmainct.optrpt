Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 17.0.2.174 Build 20170213

Compiler options: -I. -O3 -xHost -qopt-report3 -qopt-report-phase=vec,loop -qopt-report-embed -c -o jdmainct.o

Begin optimization report for: start_pass_main(j_decompress_ptr, J_BUF_MODE)

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at jdmainct.c(209,3) inlined into jdmainct.c(315,7)
   remark #15542: loop was not vectorized: inner loop was already vectorized
   remark #25015: Estimate of max trip count of loop=10

   LOOP BEGIN at jdmainct.c(217,5) inlined into jdmainct.c(315,7)
   <Multiversioned v1>
      remark #25228: Loop multiversioned for Data Dependence
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 2 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 7 
      remark #15477: vector cost: 8.500 
      remark #15478: estimated potential speedup: 0.740 
      remark #15488: --- end vector cost summary ---
      remark #25439: unrolled with remainder by 2  
      remark #25015: Estimate of max trip count of loop=10
   LOOP END

   LOOP BEGIN at jdmainct.c(217,5) inlined into jdmainct.c(315,7)
   <Remainder, Multiversioned v1>
      remark #25015: Estimate of max trip count of loop=10
   LOOP END

   LOOP BEGIN at jdmainct.c(217,5) inlined into jdmainct.c(315,7)
   <Multiversioned v2>
      remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
      remark #25439: unrolled with remainder by 2  
      remark #25015: Estimate of max trip count of loop=10
   LOOP END

   LOOP BEGIN at jdmainct.c(217,5) inlined into jdmainct.c(315,7)
   <Remainder, Multiversioned v2>
      remark #25015: Estimate of max trip count of loop=10
   LOOP END

   LOOP BEGIN at jdmainct.c(221,5) inlined into jdmainct.c(315,7)
   <Peeled loop for vectorization, Multiversioned v1>
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at jdmainct.c(221,5) inlined into jdmainct.c(315,7)
   <Multiversioned v1>
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 2 
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 9 
      remark #15477: vector cost: 5.000 
      remark #15478: estimated potential speedup: 1.770 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at jdmainct.c(221,5) inlined into jdmainct.c(315,7)
   <Remainder loop for vectorization, Multiversioned v1>
   LOOP END

   LOOP BEGIN at jdmainct.c(221,5) inlined into jdmainct.c(315,7)
   <Peeled loop for vectorization, Multiversioned v1>
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at jdmainct.c(221,5) inlined into jdmainct.c(315,7)
   <Multiversioned v1>
      remark #25230: Loop multiversioned for Same base arrays
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 9 
      remark #15477: vector cost: 6.500 
      remark #15478: estimated potential speedup: 1.360 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at jdmainct.c(221,5) inlined into jdmainct.c(315,7)
   <Remainder loop for vectorization, Multiversioned v1>
   LOOP END

   LOOP BEGIN at jdmainct.c(221,5) inlined into jdmainct.c(315,7)
   <Multiversioned v3>
      remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at jdmainct.c(221,5) inlined into jdmainct.c(315,7)
   <Remainder, Multiversioned v3>
   LOOP END

   LOOP BEGIN at jdmainct.c(230,5) inlined into jdmainct.c(315,7)
   <Multiversioned v1>
      remark #25228: Loop multiversioned for Data Dependence
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed FLOW dependence between xbuf0[i-rgroup] (231:7) and *xbuf0 (231:7)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at jdmainct.c(230,5) inlined into jdmainct.c(315,7)
   <Remainder, Multiversioned v1>
   LOOP END

   LOOP BEGIN at jdmainct.c(230,5) inlined into jdmainct.c(315,7)
   <Multiversioned v2>
      remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at jdmainct.c(230,5) inlined into jdmainct.c(315,7)
   <Remainder, Multiversioned v2>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: process_data_context_main(j_decompress_ptr, JSAMPARRAY, JDIMENSION *, JDIMENSION)

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at jdmainct.c(277,3) inlined into jdmainct.c(425,7)
   remark #25096: Loop Interchange not done due to: Imperfect Loop Nest (Either at Source or due to other Compiler Transformations)
   remark #25452: Original Order found to be proper, but by a close margin
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at jdmainct.c(295,5) inlined into jdmainct.c(425,7)
   <Peeled loop for vectorization, Multiversioned v1>
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at jdmainct.c(295,5) inlined into jdmainct.c(425,7)
   <Multiversioned v1>
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 5 
      remark #15477: vector cost: 1.500 
      remark #15478: estimated potential speedup: 3.130 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at jdmainct.c(295,5) inlined into jdmainct.c(425,7)
   <Remainder loop for vectorization, Multiversioned v1>
   LOOP END

   LOOP BEGIN at jdmainct.c(295,5) inlined into jdmainct.c(425,7)
   <Peeled loop for vectorization, Multiversioned v2>
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at jdmainct.c(295,5) inlined into jdmainct.c(425,7)
   <Multiversioned v2>
      remark #25230: Loop multiversioned for Same base arrays
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 5 
      remark #15477: vector cost: 1.500 
      remark #15478: estimated potential speedup: 3.130 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at jdmainct.c(295,5) inlined into jdmainct.c(425,7)
   <Remainder loop for vectorization, Multiversioned v2>
   LOOP END
LOOP END

LOOP BEGIN at jdmainct.c(249,3) inlined into jdmainct.c(437,7)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between main->xbuffer[0][ci] (253:5) and xbuf1[rgroup*(M+2)+i] (259:7)

   LOOP BEGIN at jdmainct.c(255,5) inlined into jdmainct.c(437,7)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between xbuf0[i-rgroup] (256:7) and xbuf1[rgroup*(M+2)+i] (259:7)
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: jinit_d_main_controller(j_decompress_ptr, boolean)

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at jdmainct.c(176,3) inlined into jdmainct.c(497,5)
   remark #15523: loop was not vectorized: loop control variable ci was found, but loop iteration count cannot be computed before executing the loop
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
LOOP END

LOOP BEGIN at jdmainct.c(503,3)
   remark #15523: loop was not vectorized: loop control variable ci was found, but loop iteration count cannot be computed before executing the loop
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
LOOP END
===========================================================================
