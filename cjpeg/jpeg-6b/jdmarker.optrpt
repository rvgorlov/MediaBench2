Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 17.0.2.174 Build 20170213

Compiler options: -I. -O3 -xHost -qopt-report3 -qopt-report-phase=vec,loop -qopt-report-embed -vec_report -o jdmarker.o -c

Begin optimization report for: get_interesting_appn(j_decompress_ptr)

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at jdmarker.c(709,3)
   remark #15324: loop was not vectorized: unsigned types for induction variable and/or for lower/upper iteration bounds make loop uncountable
LOOP END
===========================================================================

Begin optimization report for: save_marker(j_decompress_ptr)

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at jdmarker.c(788,3)
   remark #15523: loop was not vectorized: loop control variable bytes_read was found, but loop iteration count cannot be computed before executing the loop

   LOOP BEGIN at jdmarker.c(794,5)
      remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ jdmarker.c(797,7) ]
   LOOP END
LOOP END

LOOP BEGIN at jdmarker.c(808,7)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   remark #25478: While Loop Unrolled by 2  
LOOP END
===========================================================================

Begin optimization report for: read_markers(j_decompress_ptr)

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at jdmarker.c(886,5) inlined into jdmarker.c(963,8)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at jdmarker.c(889,7) inlined into jdmarker.c(963,8)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at jdmarker.c(516,5) inlined into jdmarker.c(1033,13)
   remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ jdmarker.c(1033,13) ]
LOOP END

LOOP BEGIN at jdmarker.c(526,7) inlined into jdmarker.c(1033,13)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between cinfo->err->i (527:2) and cinfo->err->msg_code (527:2)
LOOP END

LOOP BEGIN at jdmarker.c(209,3) inlined into jdmarker.c(973,13)
   remark #15300: LOOP WAS VECTORIZED
   remark #15451: unmasked unaligned unit stride stores: 3 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 0.930 
   remark #15478: estimated potential speedup: 4.000 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at jdmarker.c(439,5) inlined into jdmarker.c(1028,13)
   remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ jdmarker.c(1028,13) ]
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
LOOP END

LOOP BEGIN at jdmarker.c(446,5) inlined into jdmarker.c(1028,13)
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 1.870 
   remark #15478: estimated potential speedup: 1.900 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at jdmarker.c(449,5) inlined into jdmarker.c(1028,13)
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 1.870 
   remark #15478: estimated potential speedup: 1.900 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at jdmarker.c(459,5) inlined into jdmarker.c(1028,13)
   remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ jdmarker.c(1028,13) ]
   remark #25015: Estimate of max trip count of loop=256
LOOP END

LOOP BEGIN at jdmarker.c(325,3) inlined into jdmarker.c(1012,13)
   remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ jdmarker.c(1012,13) ]
   remark #25015: Estimate of max trip count of loop=4

   LOOP BEGIN at jdmarker.c(329,5) inlined into jdmarker.c(1012,13)
      remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ jdmarker.c(330,9) ]
   LOOP END
LOOP END

LOOP BEGIN at jdmarker.c(356,3) inlined into jdmarker.c(1012,13)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between _mp[_2] (356:3) and *(cinfo+_2*4+524) (356:3)
   remark #25436: completely unrolled by 4  
LOOP END


Non-optimizable loops:


LOOP BEGIN at jdmarker.c(1095,5)
   remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification

   LOOP BEGIN at jdmarker.c(905,5) inlined into jdmarker.c(963,8)
      remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification
   LOOP END

   LOOP BEGIN at jdmarker.c(502,3) inlined into jdmarker.c(1033,13)
      remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification
   LOOP END

   LOOP BEGIN at jdmarker.c(432,3) inlined into jdmarker.c(1028,13)
      remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: get_sof(j_decompress_ptr, boolean, boolean)

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at jdmarker.c(279,3)
   remark #15523: loop was not vectorized: loop control variable ci was found, but loop iteration count cannot be computed before executing the loop
LOOP END
===========================================================================

Begin optimization report for: read_restart_marker(j_decompress_ptr)

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at jdmarker.c(886,5) inlined into jdmarker.c(1118,11)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at jdmarker.c(889,7) inlined into jdmarker.c(1118,11)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END


Non-optimizable loops:


LOOP BEGIN at jdmarker.c(905,5) inlined into jdmarker.c(1118,11)
   remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification
LOOP END
===========================================================================

Begin optimization report for: jpeg_resync_to_restart(j_decompress_ptr, int)

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at jdmarker.c(886,5) inlined into jdmarker.c(1224,13)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at jdmarker.c(889,7) inlined into jdmarker.c(1224,13)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END


Non-optimizable loops:


LOOP BEGIN at jdmarker.c(1226,7)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.   [ jdmarker.c(905,5) ]

   LOOP BEGIN at jdmarker.c(905,5) inlined into jdmarker.c(1224,13)
      remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: jinit_marker_reader(j_decompress_ptr)

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at jdmarker.c(1282,3)
<Distributed chunk1>
   remark #25426: Loop Distributed (2 way) 
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 2 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.600 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 16  
LOOP END

LOOP BEGIN at jdmarker.c(1282,3)
<Distributed chunk2>
   remark #15301: PARTIAL LOOP WAS VECTORIZED
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 2 
   remark #15477: vector cost: 1.250 
   remark #15478: estimated potential speedup: 1.390 
   remark #15488: --- end vector cost summary ---
LOOP END
===========================================================================
