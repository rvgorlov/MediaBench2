Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 17.0.2.174 Build 20170213

Compiler options: -I. -O3 -xHost -qopt-report3 -qopt-report-phase=vec,loop -qopt-report-embed -c -o jcsample.o

Begin optimization report for: sep_downsample(j_compress_ptr, JSAMPIMAGE, JDIMENSION, JSAMPIMAGE, JDIMENSION)

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at jcsample.c(123,3)
   remark #15523: loop was not vectorized: loop control variable ci was found, but loop iteration count cannot be computed before executing the loop
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
LOOP END
===========================================================================

Begin optimization report for: int_downsample(j_compress_ptr, jpeg_component_info *, JSAMPARRAY, JSAMPARRAY)

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at jcsample.c(97,5) inlined into jcsample.c(158,3)
   remark #25096: Loop Interchange not done due to: Imperfect Loop Nest (Either at Source or due to other Compiler Transformations)
   remark #25452: Original Order found to be proper, but by a close margin
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at jcsample.c(100,7) inlined into jcsample.c(158,3)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=31
   LOOP END

   LOOP BEGIN at jcsample.c(100,7) inlined into jcsample.c(158,3)
      remark #15300: LOOP WAS VECTORIZED
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 0.340 
      remark #15478: estimated potential speedup: 3.680 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at jcsample.c(100,7) inlined into jcsample.c(158,3)
   <Remainder loop for vectorization>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at jcsample.c(100,7) inlined into jcsample.c(158,3)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at jcsample.c(162,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at jcsample.c(164,5)
      remark #25096: Loop Interchange not done due to: Imperfect Loop Nest (Either at Source or due to other Compiler Transformations)
      remark #25451: Advice: Loop Interchange, if possible, might help loopnest. Suggested Permutation : ( 1 2 3 ) --> ( 1 3 2 ) 
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at jcsample.c(167,7)
         remark #25096: Loop Interchange not done due to: Imperfect Loop Nest (Either at Source or due to other Compiler Transformations)
         remark #25451: Advice: Loop Interchange, if possible, might help loopnest. Suggested Permutation : ( 1 2 ) --> ( 2 1 ) 
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at jcsample.c(169,2)
            remark #15300: LOOP WAS VECTORIZED
            remark #15450: unmasked unaligned unit stride loads: 1 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 4 
            remark #15477: vector cost: 3.120 
            remark #15478: estimated potential speedup: 1.230 
            remark #15488: --- end vector cost summary ---
         LOOP END

         LOOP BEGIN at jcsample.c(169,2)
         <Remainder loop for vectorization>
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: fullsize_downsample(j_compress_ptr, jpeg_component_info *, JSAMPARRAY, JSAMPARRAY)

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at jcsample.c(97,5) inlined into jcsample.c(194,3)
   remark #25096: Loop Interchange not done due to: Imperfect Loop Nest (Either at Source or due to other Compiler Transformations)
   remark #25452: Original Order found to be proper, but by a close margin
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at jcsample.c(100,7) inlined into jcsample.c(194,3)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=31
   LOOP END

   LOOP BEGIN at jcsample.c(100,7) inlined into jcsample.c(194,3)
      remark #15300: LOOP WAS VECTORIZED
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 0.340 
      remark #15478: estimated potential speedup: 3.680 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at jcsample.c(100,7) inlined into jcsample.c(194,3)
   <Remainder loop for vectorization>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at jcsample.c(100,7) inlined into jcsample.c(194,3)
   <Remainder loop for vectorization>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: h2v1_downsample(j_compress_ptr, jpeg_component_info *, JSAMPARRAY, JSAMPARRAY)

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at jcsample.c(97,5) inlined into jcsample.c(225,3)
   remark #25096: Loop Interchange not done due to: Imperfect Loop Nest (Either at Source or due to other Compiler Transformations)
   remark #25452: Original Order found to be proper, but by a close margin
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at jcsample.c(100,7) inlined into jcsample.c(225,3)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=31
   LOOP END

   LOOP BEGIN at jcsample.c(100,7) inlined into jcsample.c(225,3)
      remark #15300: LOOP WAS VECTORIZED
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 0.340 
      remark #15478: estimated potential speedup: 3.680 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at jcsample.c(100,7) inlined into jcsample.c(225,3)
   <Remainder loop for vectorization>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at jcsample.c(100,7) inlined into jcsample.c(225,3)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at jcsample.c(228,3)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at jcsample.c(232,5)
   <Multiversioned v1>
      remark #25228: Loop multiversioned for Data Dependence
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed FLOW dependence between bias (235:7) and bias (233:8)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at jcsample.c(232,5)
   <Remainder, Multiversioned v1>
   LOOP END

   LOOP BEGIN at jcsample.c(232,5)
   <Multiversioned v2>
      remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at jcsample.c(232,5)
   <Remainder, Multiversioned v2>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: h2v2_downsample(j_compress_ptr, jpeg_component_info *, JSAMPARRAY, JSAMPARRAY)

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at jcsample.c(97,5) inlined into jcsample.c(262,3)
   remark #25096: Loop Interchange not done due to: Imperfect Loop Nest (Either at Source or due to other Compiler Transformations)
   remark #25452: Original Order found to be proper, but by a close margin
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at jcsample.c(100,7) inlined into jcsample.c(262,3)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=31
   LOOP END

   LOOP BEGIN at jcsample.c(100,7) inlined into jcsample.c(262,3)
      remark #15300: LOOP WAS VECTORIZED
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 0.340 
      remark #15478: estimated potential speedup: 3.680 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at jcsample.c(100,7) inlined into jcsample.c(262,3)
   <Remainder loop for vectorization>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at jcsample.c(100,7) inlined into jcsample.c(262,3)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at jcsample.c(266,3)
   remark #15523: loop was not vectorized: loop control variable outrow was found, but loop iteration count cannot be computed before executing the loop

   LOOP BEGIN at jcsample.c(271,5)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed FLOW dependence between *outptr (272:8) and *inptr0 (272:8)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at jcsample.c(271,5)
   <Remainder>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: h2v2_smooth_downsample(j_compress_ptr, jpeg_component_info *, JSAMPARRAY, JSAMPARRAY)

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at jcsample.c(97,5) inlined into jcsample.c(305,3)
   remark #25096: Loop Interchange not done due to: Imperfect Loop Nest (Either at Source or due to other Compiler Transformations)
   remark #25452: Original Order found to be proper, but by a close margin
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at jcsample.c(100,7) inlined into jcsample.c(305,3)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=31
   LOOP END

   LOOP BEGIN at jcsample.c(100,7) inlined into jcsample.c(305,3)
      remark #15300: LOOP WAS VECTORIZED
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 0.340 
      remark #15478: estimated potential speedup: 3.680 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at jcsample.c(100,7) inlined into jcsample.c(305,3)
   <Remainder loop for vectorization>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at jcsample.c(100,7) inlined into jcsample.c(305,3)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at jcsample.c(325,3)
   remark #15523: loop was not vectorized: loop control variable outrow was found, but loop iteration count cannot be computed before executing the loop

   LOOP BEGIN at jcsample.c(346,5)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed ANTI dependence between *inptr0 (348:7) and *outptr (363:8)
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: fullsize_smooth_downsample(j_compress_ptr, jpeg_component_info *, JSAMPARRAY, JSAMPARRAY)

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at jcsample.c(97,5) inlined into jcsample.c(406,3)
   remark #25096: Loop Interchange not done due to: Imperfect Loop Nest (Either at Source or due to other Compiler Transformations)
   remark #25452: Original Order found to be proper, but by a close margin
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at jcsample.c(100,7) inlined into jcsample.c(406,3)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=31
   LOOP END

   LOOP BEGIN at jcsample.c(100,7) inlined into jcsample.c(406,3)
      remark #15300: LOOP WAS VECTORIZED
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 0.340 
      remark #15478: estimated potential speedup: 3.680 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at jcsample.c(100,7) inlined into jcsample.c(406,3)
   <Remainder loop for vectorization>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at jcsample.c(100,7) inlined into jcsample.c(406,3)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at jcsample.c(418,3)
   remark #15523: loop was not vectorized: loop control variable outrow was found, but loop iteration count cannot be computed before executing the loop

   LOOP BEGIN at jcsample.c(435,5)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed ANTI dependence between *inptr (436:7) and *outptr (442:8)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at jcsample.c(435,5)
   <Remainder>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: jinit_downsampler(j_compress_ptr)

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at jcsample.c(483,3)
   remark #15523: loop was not vectorized: loop control variable ci was found, but loop iteration count cannot be computed before executing the loop
LOOP END
===========================================================================
